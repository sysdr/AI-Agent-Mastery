import React, { useState, useEffect } from 'react';
import { AlertTriangle, Shield, TrendingUp, TrendingDown } from 'lucide-react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { apiService } from '../services/apiService';

const VulnerabilityReport = () => {
  const [vulnerabilities, setVulnerabilities] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchVulnerabilities();
  }, []);

  const fetchVulnerabilities = async () => {
    try {
      const data = await apiService.getVulnerabilities();
      setVulnerabilities(data);
      setLoading(false);
    } catch (error) {
      console.error('Failed to fetch vulnerabilities:', error);
      setLoading(false);
    }
  };

  if (loading) return <div className="animate-spin h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>;

  const chartData = vulnerabilities ? [
    { name: 'High', count: vulnerabilities.severity_breakdown.high, color: '#dc2626' },
    { name: 'Medium', count: vulnerabilities.severity_breakdown.medium, color: '#ea580c' },
    { name: 'Low', count: vulnerabilities.severity_breakdown.low, color: '#ca8a04' }
  ] : [];

  const getRiskColor = (score) => {
    if (score >= 70) return 'text-red-600 bg-red-50';
    if (score >= 40) return 'text-yellow-600 bg-yellow-50';
    return 'text-green-600 bg-green-50';
  };

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900">Vulnerability Report</h1>
      
      {vulnerabilities && (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Total Vulnerabilities</p>
                  <p className="text-2xl font-bold text-gray-900">{vulnerabilities.total_vulnerabilities}</p>
                </div>
                <AlertTriangle className="h-8 w-8 text-red-600" />
              </div>
            </div>

            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">High Severity</p>
                  <p className="text-2xl font-bold text-red-600">{vulnerabilities.severity_breakdown.high}</p>
                </div>
                <TrendingUp className="h-8 w-8 text-red-600" />
              </div>
            </div>

            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Medium Severity</p>
                  <p className="text-2xl font-bold text-yellow-600">{vulnerabilities.severity_breakdown.medium}</p>
                </div>
                <TrendingDown className="h-8 w-8 text-yellow-600" />
              </div>
            </div>

            <div className={`rounded-lg shadow p-6 ${getRiskColor(vulnerabilities.risk_score)}`}>
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium">Risk Score</p>
                  <p className="text-2xl font-bold">{vulnerabilities.risk_score}/100</p>
                </div>
                <Shield className="h-8 w-8" />
              </div>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Severity Distribution</h3>
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={chartData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis />
                  <Tooltip />
                  <Bar dataKey="count" fill={(entry) => entry.color} />
                </BarChart>
              </ResponsiveContainer>
            </div>

            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Vulnerabilities</h3>
              <div className="space-y-3">
                {vulnerabilities.recent_vulnerabilities?.slice(0, 5).map((vuln, index) => (
                  <div key={index} className="border border-gray-200 rounded p-3">
                    <div className="flex justify-between items-start">
                      <div>
                        <p className="font-medium text-gray-900">{vuln.type}</p>
                        <p className="text-sm text-gray-600">{vuln.description}</p>
                      </div>
                      <span className={`px-2 py-1 text-xs font-semibold rounded ${
                        vuln.severity === 'high' ? 'bg-red-100 text-red-800' :
                        vuln.severity === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        {vuln.severity}
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default VulnerabilityReport;
